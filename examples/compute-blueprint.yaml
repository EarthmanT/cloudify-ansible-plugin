tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin.yaml

inputs:

  site_yaml_relative_path:
    type: string
    default: examples/ansible-examples/lamp_simple/site.yml

  webserver_vm_ip:
    type: string
    default: 11.0.0.7

  dbserver_vm_ip:
    type: string
    default: 11.0.0.8

node_templates:

  ansible_playbook:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            site_yaml_path: { get_input: site_yaml_relative_path }
            sources:
              webservers:
                hosts:
                  web:
                    ansible_host: { get_property: [ webserver_vm, ip ] }
                    ansible_user: vagrant
                    ansible_ssh_private_key_file: .vagrant/machines/web/virtualbox/private_key
                    ansible_become: True
                    ansible_ssh_common_args': -o StrictHostKeyChecking=no
              dbservers:
                hosts:
                  db:
                    ansible_host: { get_property: [ dbserver_vm, ip ] }
                    ansible_user: vagrant
                    ansible_ssh_private_key_file: .vagrant/machines/db/virtualbox/private_key
                    ansible_become: True
                    ansible_ssh_common_args': -o StrictHostKeyChecking=no
    relationships:
      - type: cloudify.relationships.depends_on
        target: webserver_vm
      - type: cloudify.relationships.depends_on
        target: dbserver_vm

  webserver_vm:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: webserver_vm_ip }
      agent_config:
        install_method: none

  dbserver_vm:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: dbserver_vm_ip }
      agent_config:
        install_method: none
